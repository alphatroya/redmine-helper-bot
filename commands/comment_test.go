package commands

import (
	"errors"
	"fmt"
	"testing"

	"github.com/alphatroya/redmine-helper-bot/redmine"
	"github.com/alphatroya/redmine-helper-bot/storage"
)

func TestAddComment_Handle(t *testing.T) {
	host := "https://google.com"
	mockIssue := &redmine.Issue{
		AssignedTo: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
		},
		Author: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–°–∏–¥–æ—Ä–æ–≤ –õ–µ–≤",
		},
		Status: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–°–¥–µ–ª–∞–Ω–æ",
		},
		Subject: "–ù–∞–∑–≤–∞–Ω–∏–µ",
	}

	testData := []struct {
		command   string
		result    string
		issue     *redmine.Issue
		issueErr  error
		resultErr string
		completed bool
	}{
		{
			resultErr: "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
		},
		{
			command:   "34fdsd111",
			resultErr: "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏",
		},
		{
			command: "43213",
			issue:   mockIssue,
			result:  fmt.Sprintf("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ [#43213](%s/issues/43213)"+issuePrintMessage(), host),
		},
		{
			command: "#43214",
			issue:   mockIssue,
			result:  fmt.Sprintf("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ [#43214](%s/issues/43214)"+issuePrintMessage(), host),
		},
		{
			command:  "#43214",
			issueErr: fmt.Errorf("error"),
			result:   fmt.Sprintf("–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞—á–µ [#43214](%s/issues/43214)", host),
		},
	}

	for _, testCase := range testData {
		printerMock := PrinterMock{}
		storageMock := storage.NewStorageMock()
		var chatID int64 = 5
		storageMock.SetHost(host, chatID)

		redmineMock := &RedmineMock{}
		if testCase.issue != nil {
			redmineMock.mockIssue = &redmine.IssueContainer{Issue: testCase.issue}
		}
		if testCase.issueErr != nil {
			redmineMock.mockIssueErr = testCase.issueErr
		}

		command := NewAddComment(redmineMock, storageMock, printerMock, chatID)
		result, err := command.Handle(testCase.command)
		completed := command.IsCompleted()

		if completed != testCase.completed {
			t.Errorf("completed status is not same to expected, got: %t, expected: %t", completed, testCase.completed)
		}

		if err != nil {
			if err.Error() != testCase.resultErr {
				t.Errorf("command return wrong error\ngot: %s\nexpected: %s", err, testCase.resultErr)
			}
			continue
		}

		if len(result.buttons) != 0 {
			t.Error("success command should not return buttons")
		}

		if result.Message() != testCase.result {
			t.Errorf("command: %s\nreturn wrong message\ngot: \"%s\"\nexpected: \"%s\"", testCase.command, result.Message(), testCase.result)
		}
	}
}

func TestAddComment_Handle_Phase2(t *testing.T) {
	host := "https://google.com"
	issueID := "43213"
	mockIssue := &redmine.Issue{
		AssignedTo: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
		},
		Author: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{ID: 111, Name: "–¢–µ—Å—Ç –¢–µ—Å—Ç"},
		Status: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–°–¥–µ–ª–∞–Ω–æ",
		},
		Subject: "–ù–∞–∑–≤–∞–Ω–∏–µ",
	}

	testData := []struct {
		command       string
		isRefuse      bool
		result        string
		resultErr     string
		resultButtons []string
		addCommentErr error
		completed     bool
	}{
		{
			command:   "Test",
			result:    fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s)", issueID, host, issueID),
			completed: true,
		},
		{
			command:   "Test",
			isRefuse:  true,
			result:    fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s) –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –Ω–∞: %s", issueID, host, issueID, mockIssue.Author.Name),
			completed: true,
		},
		{
			command:   "  ",
			resultErr: "–í–≤–µ–¥–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
			completed: false,
		},
		{
			command:   "",
			resultErr: "–í–≤–µ–¥–µ–Ω –ø—É—Å—Ç–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
			completed: false,
		},
		{
			command:       "Test",
			result:        fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π *–Ω–µ –±—ã–ª* –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s) üòû\n\n–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å?", issueID, host, issueID),
			resultButtons: []string{"–î–∞", "–ù–µ—Ç"},
			addCommentErr: errors.New("error mock"),
			completed:     false,
		},
	}

	for _, testCase := range testData {
		storageMock := storage.NewStorageMock()
		var chatID int64 = 5
		storageMock.SetHost(host, chatID)

		redmineMock := &RedmineMock{}
		redmineMock.mockIssue = &redmine.IssueContainer{Issue: mockIssue}
		if testCase.addCommentErr != nil {
			redmineMock.mockAddCommentError = testCase.addCommentErr
		}

		printerMock := PrinterMock{}
		command := NewAddComment(redmineMock, storageMock, printerMock, chatID)
		command.isReject = testCase.isRefuse
		_, _ = command.Handle(issueID)
		result, err := command.Handle(testCase.command)
		completed := command.IsCompleted()

		if completed != testCase.completed {
			t.Errorf("completed status is not same to expected, got: %t, expected: %t", completed, testCase.completed)
		}

		if result != nil {
			if (result.buttons == nil) != (testCase.resultButtons == nil) || len(result.buttons) != len(testCase.resultButtons) {
				t.Errorf("buttons not match, got: %#v, expected: %#v", result.buttons, testCase.resultButtons)
			}

			for i := range result.buttons {
				if result.buttons[i] != testCase.resultButtons[i] {
					t.Errorf("button's title at %d not match, got: %s, expected: %s", i, result.buttons[i], testCase.resultButtons[i])
				}
			}
		}

		if err != nil {
			if err.Error() != testCase.resultErr {
				t.Errorf("command return wrong error\ngot: %s\nexpected: %s", err, testCase.resultErr)
			}
			continue
		}

		if result.Message() != testCase.result {
			t.Errorf("command: %s\nreturn wrong message\ngot: \"%s\"\nexpected: \"%s\"", testCase.command, result.Message(), testCase.result)
		}
	}
}

func TestAddComment_Handle_Phase3(t *testing.T) {
	host := "https://google.com"
	issueID := "43213"
	mockIssue := &redmine.Issue{
		AssignedTo: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω",
		},
		Status: struct {
			ID   int    `json:"id"`
			Name string `json:"name"`
		}{
			Name: "–°–¥–µ–ª–∞–Ω–æ",
		},
		Subject: "–ù–∞–∑–≤–∞–Ω–∏–µ",
	}

	testData := []struct {
		message       string
		command       string
		result        string
		resultErr     string
		addCommentErr error
		completed     bool
	}{
		{
			message:   "Test",
			command:   "–î–ê",
			result:    fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s)", issueID, host, issueID),
			completed: true,
		},
		{
			message:   "Test",
			command:   "–î–∞",
			result:    fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s)", issueID, host, issueID),
			completed: true,
		},
		{
			message:   "Test",
			command:   "–¥–∞",
			result:    fmt.Sprintf("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∑–∞–¥–∞—á—É [#%s](%s/issues/%s)", issueID, host, issueID),
			completed: true,
		},
		{
			message:   "Test",
			command:   "–ù–µ—Ç",
			result:    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
			completed: true,
		},
		{
			message:   "Test",
			command:   "–ù–ï–¢",
			result:    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
			completed: true,
		},
		{
			message:   "Test",
			command:   "–Ω–µ—Ç",
			result:    "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
			completed: true,
		},
		{
			message:   "Test",
			command:   "–∞–ª–∞–∞",
			result:    `–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞–ø–∏—Å–∞—Ç—å "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç"`,
			completed: false,
		},
	}

	for _, testCase := range testData {
		storageMock := storage.NewStorageMock()
		var chatID int64 = 5
		storageMock.SetHost(host, chatID)

		redmineMock := &RedmineMock{}
		redmineMock.mockIssue = &redmine.IssueContainer{Issue: mockIssue}
		redmineMock.mockAddCommentError = errors.New("error during fill hours")

		printerMock := PrinterMock{}
		command := NewAddComment(redmineMock, storageMock, printerMock, chatID)
		_, _ = command.Handle(issueID)
		_, _ = command.Handle(testCase.message)
		redmineMock.mockAddCommentError = nil
		result, err := command.Handle(testCase.command)
		completed := command.IsCompleted()

		if completed != testCase.completed {
			t.Errorf("completed status is not same to expected, got: %t, expected: %t", completed, testCase.completed)
		}

		if err != nil {
			if err.Error() != testCase.resultErr {
				t.Errorf("command return wrong error\ngot: %s\nexpected: %s", err, testCase.resultErr)
			}
			continue
		}

		if len(result.buttons) != 0 {
			t.Error("success command should not return buttons")
		}

		if result.Message() != testCase.result {
			t.Errorf("command: %s\nreturn wrong message\ngot: \"%s\"\nexpected: \"%s\"", testCase.command, result.Message(), testCase.result)
		}
	}
}

func TestAddComment_Handle_EmptyHost(t *testing.T) {
	storageMock := storage.NewStorageMock()
	var chatID int64 = 5
	redmineMock := &RedmineMock{}
	printerMock := PrinterMock{}
	command := NewAddComment(redmineMock, storageMock, printerMock, chatID)
	_, err := command.Handle("Foo")
	if err == nil {
		t.Errorf("Empty storage case should return an error")
	}
}

func issuePrintMessage() string {
	result := "\n\n\n"
	result += "*–ù–∞–∑–≤–∞–Ω–∏–µ*\n\n"
	result += "`+-----------+-------------+\n"
	result += "| –°–¢–ê–¢–£–°    | –°–¥–µ–ª–∞–Ω–æ     |\n"
	result += "| –ê–í–¢–û–†     | –°–∏–¥–æ—Ä–æ–≤ –õ–µ–≤ |\n"
	result += "| –ù–ê–ó–ù–ê–ß–ï–ù–û | –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω |\n"
	result += "+-----------+-------------+\n"
	result += "`"
	return result
}
